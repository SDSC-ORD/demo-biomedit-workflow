

// params can be overriden using CLI flags (e.g. -output_dir 'ext/out')
params {
    registry = null
    input_dir = 'data/raw/fhir_stu3/'
    yml_mappings = 'data/mappings.yml'
    output_dir = 'data/out/'
    ontology = 'assets/sphn_ontology_2022.2.ttl'
    shapes = 'assets/shacl_2022-2.ttl'
}

podman {
    enabled = true
    temp = 'auto'
    runOptions = '--entrypoint="" --user root'
    mountFlags = 'Z'
}
def set_registry(uri) {
    (params.registry == null) ? uri : uri.replaceAll(/.*\//, params.registry)
}
process {
    shell = ['/bin/sh']
    withName: convert_mappings {
        container = set_registry(params.yarrrml_parser)
    }
    withName: generate_triples {
        container = set_registry(params.rmlstreamer)
    }
    withName: shacl_validation {
        container = set_registry(params.pyshacl)
    }
}

manifest {
    homePage = "https://github.com/SDSC-ORD/demo_biomedit_workflow"
    description = "demo workflow"
    version = "0.1.0"
    author = "cmdoret"
}

// Automatic log generation upon workflow complete
workflow.onComplete = {
    // Define log structure
    workflow.with {
        msg = """\
            {
                "status": "${success}",
                "duration": "${duration}",
                "start": "${start}",
                "complete": "${complete}",
                "workDir": "${workDir}",
                "exit": "${exitStatus}",
                "error": "${errorReport ?: 'null'}",
                "command": "${commandLine}",
                "repository": "${repository ?: 'null'}",
                "commit": "${commitId ?: 'null'}",
                "stats": "${stats}",
                "manifest": {
                    "version": "${manifest.version}",
                    "author": "${manifest.author}",
                    "homePage": "${manifest.homePage}"

                },
                "nextflow": {
                    "version": "${nextflow.version}",
                    "build": "${nextflow.build}"
                }
            }
            """.stripIndent()
    }
        File logFile = new File("${params.output_dir}/logs.json")
        logFile.write msg
}
