
// params can be overriden using CLI flags (e.g. -output_dir 'ext/out')
params {
    input_dir = 'data/raw/test'
    output_dir = 'data/out/'
    yml_mappings = 'data/mappings.yml'
    ontology = 'assets/sphn_ontology_2022.2.ttl'
    shapes = 'assets/shacl_2022-2.ttl'
}

// we set two profiles: one for development using public container images
// and one for production running with the dcc container registry.

podman {
    enabled = true
    runOptions = '--entrypoint=""'
} 
process.shell = ['/bin/sh']
    
profiles {
    prod {
        podman.registry = "container-registry.dcc.sib.swiss"
    }
    dev {
        includeConfig 'conf/containers.conf'
    }
}
manifest {
    homePage = "https://github.com/SDSC-ORD/demo_biomedit_workflow"
    description = "demo workflow"
    version = "0.1.0"
    author = "cmdoret"
}

// Automatic log generation upon workflow complete
workflow.onComplete = {
    // Define log structure
    workflow.with {
        msg = """\
            {
                "status": "${success}",
                "duration": "${duration}",
                "start": "${start}",
                "complete": "${complete}",
                "workDir": "${workDir}",
                "exit": "${exitStatus}",
                "command": "${commandLine}",
                "repository": "${repository ?: 'null'}",
                "commit": "${commitId ?: 'null'}",
                "stats": "${stats}",
                "manifest": {
                    "version": "${manifest.version}",
                    "author": "${manifest.author}",
                    "homePage": "${manifest.homePage}"

                },
                "nextflow": {
                    "version": "${nextflow.version}",
                    "build": "${nextflow.build}"
                }
            }
            """.stripIndent()
    }
        File logFile = new File("${params.output_dir}/logs.json")
        logFile.write msg
}
